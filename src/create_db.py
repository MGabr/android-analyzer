from textwrap import dedent

from src.models.certificate import Certificate
from src.models.scenario_settings import ScenarioSettings
from src.app import db
from src.models.vuln_type import VulnType


def create_db():
    db.create_all()


def fill_db():
    _add_default_settings()


def drop_db():
    db.drop_all()


def _add_default_settings():
    mitmproxy_ca_signed = Certificate(
        name='Signed on-the-fly by unknown CA',
        description=dedent('''
        This is a not expired, on-the-fly generated certificate with the right hostname.
        It is signed by the mitmproxy default certificate authority.
        '''))

    other_hostname_self_signed = Certificate(
        name='Self-signed with fixed hostname',
        description=dedent('''
        This is a not expired certificate with a fixed hostname (*.mitmproxy.org).
        It is self signed.
        '''),
        custom_cert="default/other_hostname_self_signed.pem")

    untrusted_ca = Certificate(
        name='Signed on-the-fly by an untrusted CA',
        description=dedent('''
        This is a not expired, on-the-fly generated certificate with the right hostname.
        It is signed by an untrusted certificate authority.
        '''),
        custom_ca="default/ca.pem")

    db.session.add(mitmproxy_ca_signed)
    db.session.add(other_hostname_self_signed)
    db.session.add(untrusted_ca)

    db.session.flush()

    mitmproxy_ca_signed_tm = ScenarioSettings(
        vuln_type=VulnType.trust_manager,
        mitm_certificate=mitmproxy_ca_signed,
        info_message='''The app has a vulnerable TrustManager implementation and a man-in-the-middle attack with a certificate generated by a untrusted certificate authority (but otherwise valid) was possible.''')

    # TODO: expired_trusted_ca_tm
    # TODO: notyetvalid_ca_tm?
    # TODO: expired_trusted_cert_tm? how
    # TODO: notyetvalid_trusted_cert_tm? how?

    other_hostname_self_signed_hv = ScenarioSettings(
        vuln_type=VulnType.hostname_verifier,
        mitm_certificate=other_hostname_self_signed,
        info_message='''The app has a vulnerable HostnameVerifier implementation and a man-in-the-middle attack with a self signed certificate with another hostname (*.mitmproxy.org) was possible.''')

    # TODO: other_hostname_trusted_ca_hv

    no_pinning_hv = ScenarioSettings(
        vuln_type=VulnType.hostname_verifier,
        mitm_certificate=untrusted_ca,
        sys_certificates=[untrusted_ca],
        info_message='''The app has a possibly vulnerable HostnameVerifier implementation and certificate pinning is not implemented (securely).''')

    no_pinning_tm = ScenarioSettings(
        vuln_type=VulnType.trust_manager,
        mitm_certificate=untrusted_ca,
        sys_certificates=[untrusted_ca],
        info_message='''The app has a vulnerable TrustManager implementation in which certificate pinning is not implemented (securely).''')

    no_pinning_tm_added_upstream_certs = ScenarioSettings(
        vuln_type=VulnType.trust_manager,
        mitm_certificate=untrusted_ca,
        sys_certificates=[untrusted_ca],
        info_message='''The app has a vulnerable TrustManager implementation in which certificate pinning is not implemented (securely). If the other scenario with the same description is not vulnerable, then this is a getPeerCertificates() bug vulnerability.''',
        add_upstream_certs=True)

    mitmproxy_ca_signed_wv = ScenarioSettings(
        vuln_type=VulnType.web_view_client,
        mitm_certificate=mitmproxy_ca_signed,
        info_message='''The app has a vulnerable WebViewClient implementation and a man-in-the-middle attack with a certificate generated by a untrusted certificate authority (but otherwise valid) was possible.''')

    other_hostname_self_signed_wv = ScenarioSettings(
        vuln_type=VulnType.web_view_client,
        mitm_certificate=other_hostname_self_signed,
        info_message='''The app has a vulnerable WebViewClient implementation and a man-in-the-middle attack with a self signed certificate with another hostname (*.mitmproxy.org) was possible.''')

    # TODO: other_hostname_trusted_ca_wv
    # TODO: expired_trusted_ca_wv?
    # TODO: notyetvalid_trusted_ca_wv?
    # TODO: expired_trusted_cert_wv? how?
    # TODO: notyetvalid_trusted_cert_wv? how?

    db.session.add(mitmproxy_ca_signed_tm)
    db.session.add(other_hostname_self_signed_hv)
    db.session.add(no_pinning_hv)
    db.session.add(no_pinning_tm)
    db.session.add(no_pinning_tm_added_upstream_certs)
    db.session.add(mitmproxy_ca_signed_wv)
    db.session.add(other_hostname_self_signed_wv)

    db.session.commit()
